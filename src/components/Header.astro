---
import clsx from 'clsx'
import Hummingbird from './Hummingbird.astro'
import Icon from './Icon.astro'
import menu from '../data/menu.json'
import site from '../data/site.json'
import { getPages } from '../utils/pages'

interface Props {
  pathname: string
  alt?: boolean
}

const { alt } = Astro.props as Props

const allPages = Astro.fetchContent('../data/pages/*.md')

const pages = getPages(allPages, menu.pages)
  .map(({ title, href }) => ({ title, href }))
---

<script hoist>
  const headerElem = document.getElementById('header')
  const inputElem = document.getElementById('menubtn')
  const navElem = document.querySelector('#header nav')
  const closeElem = document.querySelector('#header nav button.icon')
  const ctaElem = document.querySelector('#header nav a.button')

  headerElem.classList.add('js')

  if (ctaElem) {
    ctaElem.classList.add('secondary')
  }

  const onClick = (event) => {
    if (clickedOutside(event)) {
      close()
    }
  }

  const clickedOutside = (event) => {
    return navElem && !navElem.contains(event.target)
  }

  const close = () => {
    inputElem.checked = false
    onClose()
  }

  const onOpen = () => {
    document.documentElement.classList.add('overlay-visible')
    document.documentElement.addEventListener('click', onClick, true)
    closeElem.addEventListener('click', close)
  }

  const onClose = () => {
    document.documentElement.classList.remove('overlay-visible')
    document.documentElement.removeEventListener('click', onClick, true)
    closeElem.removeEventListener('click', close)
  }

  inputElem.addEventListener('change', (event) => {
    if (event.target.checked) {
      onOpen()
    } else {
      onClose()
    }
  })
</script>

<header class={clsx({ alt })} id='header'>
  <a href='/' class='h5 nohover' rel='home'>
    <Hummingbird width='72' height='72' opacity={0.4} theme={alt ? 'secondary' : 'gradient'} />
    {site.title}
  </a>

  <input type="checkbox" id="menubtn" class="sr-only" />
  <label role="button" for="menubtn" class="button">
    <span></span>
  </label>

  <div id='backdrop'></div>
  <nav>
    <button class='icon'>
      <Icon icon='close' alt='Close menu' />
    </button>
    <ul>
      {pages.map(({ title, href }) => (
        <li>
          <a class='alt' href={href}>{title}</a>
        </li>
      ))}

      {menu.cta && (
        <a class={clsx({ button: true, secondary: alt })} href={menu.cta.url}>{menu.cta.text}</a>
      )}
    </ul>
  </nav>
</header>

<style lang='scss'>
  header {
    --header-color: var(--chisel-neutral-900);
    color: var(--header-color);
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-areas: 'brand . menu' 'nav nav nav';
    align-items: center;
    justify-content: space-between;
    padding: var(--spacer-sm) 0;
    margin-top: var(--spacer-sm);
  }

  header.alt {
    --header-color: var(--chisel-neutral-50);
  }

  a {
    text-decoration: none;
  }

  [rel=home] {
    grid-area: brand;
    position: relative;
  }

  [rel=home] :global(svg) {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -55%) scaleX(-1);
    z-index: -1;
  }

  label[for=menubtn] {
    grid-area: menu;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    height: var(--spacer-md);
    width: var(--spacer-md);
    border-radius: 999px;
    padding: 0;
    margin: 0;
    background: transparent;
    border: 2px solid var(--header-color);
    box-shadow: var(--shadow);

    & span {
      width: 50%;
      height: 1px;
      background: var(--header-color);
    }

    & span:before, & span:after {
      content: '';
      display: block;
      width: 100%;
      height: 1px;
      background: var(--header-color);
    }

    & span:before {
      transform: translateY(-.33em);
    }

    & span:after {
      transform: translateY(calc(.33em - 1px));
    }
  }

  nav {
    display: none;
    grid-area: nav;

    & button.icon {
      display: none;
    }

    & ul {
      list-style: none;
      text-align: center;
      margin: 0;
    }
    
    & a:not(.button) {
      display: block;
      padding: var(--spacer-tiny) 0;
      text-transform: uppercase;
    }

    & a.button {
      font-size: inherit;
    }
  }

  #menubtn:checked ~ nav {
    display: block;
  }

  @media screen and (max-width: 979px) {
    header.js {
      grid-template-areas: 'brand . menu';

      & nav {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        width: 90vw;
        max-width: 350px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--chisel-primary);
        color: var(--chisel-neutral-50);
        will-change: transform;
        transform: translate(100%, 0);
        transition: transform 250ms ease;
        z-index: 2;

        & button.icon {
          display: flex;
          position: absolute;
          top: var(--spacer-sm);
          right: var(--spacer-sm);
        }

        & li {
          font-size: var(--chisel-h5);
          margin-bottom: var(--spacer-sm);

          &:last-of-type {
            margin-bottom: var(--spacer-md);
          }
        }
      }

      & #menubtn:checked ~ nav {
        display: flex;
        transform: translate(0, 0);
      }

      & #menubtn:checked ~ #backdrop {
        display: block;
        opacity: 0.5;
      }
    }
  }

  #backdrop {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--chisel-neutral-900);
    z-index: 1;
  }

  @media screen and (min-width: 979px) {
    #menubtn, label[for=menubtn] {
      display: none;
    }

    header {
      grid-template-areas: 'brand . nav';
      margin-top: var(--spacer-md);
    }

    [rel=home] {
      font-size: var(--chisel-h4);

      & :global(svg) {
        transform: translate(-50%, -55%) scale(-1.5, 1.5);
      }
    }

    nav {
      display: block;

      & ul {
        display: flex;
        padding: 0;
      }

      & a:not(.button) {
        padding: var(--spacer-sm) var(--spacer-md);

        &:last-child {
          padding-right: 0;
        }
      }

      a.button {
        margin-left: var(--spacer-md);
      }
    }
  }
</style>